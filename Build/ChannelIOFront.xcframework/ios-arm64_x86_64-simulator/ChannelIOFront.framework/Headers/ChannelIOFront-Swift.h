#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef CHANNELIOFRONT_SWIFT_H
#define CHANNELIOFRONT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChannelIOFront",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// An enum object for the appearance of the SDK.
typedef SWIFT_ENUM(NSInteger, Appearance, open) {
  AppearanceSystem = 0,
  AppearanceLight = 1,
  AppearanceDark = 2,
};

@class NSString;
@class Profile;
@class ChannelButtonOption;
@class BubbleOption;
enum LanguageOption : NSInteger;
enum ChannelStage : NSInteger;
@class NSCoder;

/// Model used for boot.
SWIFT_CLASS("_TtC14ChannelIOFront10BootConfig")
@interface BootConfig : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Key generated by ChannelIO
@property (nonatomic, copy) NSString * _Nonnull pluginKey;
/// User’s unique id. Logged in customers should always have this value filled in.
@property (nonatomic, copy) NSString * _Nullable memberId;
/// A hash value that verifies the provided secret key and member id.
@property (nonatomic, copy) NSString * _Nullable memberHash;
/// Users’ profile values
@property (nonatomic, strong) Profile * _Nullable profile;
/// Change default channel button’s position, margins.
@property (nonatomic, strong) ChannelButtonOption * _Nullable channelButtonOption;
/// Change default bubble popup’s position, margins.
@property (nonatomic, strong) BubbleOption * _Nullable bubbleOption;
/// Hide in app popup like marketing messages.
/// If you want to implemets custom popup, use onPopupDataReceived delegate.
@property (nonatomic) BOOL hidePopup;
/// Flag for send default events like PageView.
@property (nonatomic) BOOL trackDefaultEvent;
/// Language for initializing users. If user is already created, this option is ignored.
@property (nonatomic) enum LanguageOption language;
@property (nonatomic) enum ChannelStage stage;
/// Model used for boot.
/// Data structure that contains plugin key, user id, profiles, unsubscribed information, etc…
/// attention:
/// Do not recommend to use a predictable value for memberId Because memberId is a unique valuethat we use to identify users, we do not recommend to use predictable values such as numerical combination, emailaddress, user name and etc. It may cause privacy and security issues. We recommend to use higher than 256 bitshash value.
/// \code
/// let profile = Profile()
///   .set(name: USER_NAME)
///   .set(propertyKey: KEY, value: VALUE)
///
/// let channelButtonOption = ChannelButtonOption.init(
///   position: .left,
///   xMargin: 16,
///   yMargin: 24
/// )
///
/// let bootConfig = BootConfig()
///   .set(pluginKey: PLUGIN_KEY)
///   .set(memberId: MEMBER_ID)
///   .set(profile: profile)
///   ...
///
/// ChannelIO.boot(with: bootConfig)
///
/// \endcode\param pluginKey Key generated by ChannelIO
///
/// \param memberId User’s unique id. Logged in customers should always have this value filled in
///
/// \param memberHash A hash value that verifies the provided secret key and member id
///
/// \param profile Users’ profile values
///
/// \param channelButtonOption Option that change default channel button position, margins
///
/// \param bubbleOption Option that change default bubble popup’s position, margins
///
/// \param hidePopup Flag for hide in app popup like marketing messages.
///
/// \param trackDefaultEvent Flag for send default events like PageView
///
/// \param language Language option that initializes users. If user is already created, this option is ignored.
///
/// \param unsubscribeEmail Flag for receive marketing message by email.
///
/// \param unsubscribeTexting Flag for receive marketing message sms of lms.
///
/// \param appearance Plugin’s initial appearance settings
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Key generated by ChannelIO
- (BootConfig * _Nonnull)setWithPluginKey:(NSString * _Nonnull)pluginKey;
/// User’s unique id. Logged in customers should always have this value filled in
- (BootConfig * _Nonnull)setWithMemberId:(NSString * _Nullable)memberId;
/// A hash value that verifies the provided secret key and member id
- (BootConfig * _Nonnull)setWithMemberHash:(NSString * _Nullable)memberHash;
/// Users’ profile values
- (BootConfig * _Nonnull)setWithProfile:(Profile * _Nullable)profile;
/// Change default channel button’s position, margins
- (BootConfig * _Nonnull)setWithChannelButtonOption:(ChannelButtonOption * _Nullable)channelButtonOption;
/// Change default bubble popup’s position, margins
- (BootConfig * _Nonnull)setWithBubbleOption:(BubbleOption * _Nonnull)bubbleOption;
/// Hide in app popup like marketing messages.
/// If you want to implemets custom popup, use `onPopupDataReceived delegate
- (BootConfig * _Nonnull)setWithHidePopup:(BOOL)hidePopup;
/// Flag for send default events like PageView
- (BootConfig * _Nonnull)setWithTrackDefaultEvent:(BOOL)trackDefaultEvent;
/// Language for initializing users
/// If user is already created, this option is ignored
- (BootConfig * _Nonnull)setWithLanguage:(enum LanguageOption)language;
/// Flag for receive marketing message by email
/// If user’s unsubscribeEmail value is already set to true, you can’t update by boot
- (BootConfig * _Nonnull)setWithUnsubscribeEmail:(BOOL)unsubscribeEmail;
/// Flag for receive marketing message sms of lms
/// If user’s unsubscribeTexting value is already set to true, you can’t update by boot
- (BootConfig * _Nonnull)setWithUnsubscribeTexting:(BOOL)unsubscribeTexting;
- (BootConfig * _Nonnull)setWithAppearance:(enum Appearance)appearance;
@end

typedef SWIFT_ENUM(NSInteger, BootStatus, open) {
  BootStatusSuccess = 0,
  BootStatusNotInitialized = 1,
  BootStatusNetworkTimeout = 2,
  BootStatusNotAvailableVersion = 3,
  BootStatusServiceUnderConstruction = 4,
  BootStatusRequirePayment = 5,
  BootStatusAccessDenied = 6,
  BootStatusUnknown = 7,
};

enum BubblePosition : NSInteger;
@class NSNumber;

/// Option for default bubble popup’s position. You can set bubble popup position top or bottom bottom by <code>BubblePosition</code>
SWIFT_CLASS("_TtC14ChannelIOFront12BubbleOption")
@interface BubbleOption : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) enum BubblePosition position;
@property (nonatomic, strong) NSNumber * _Nullable yMargin;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPosition:(enum BubblePosition)position OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithYMargin:(float)yMargin OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPosition:(enum BubblePosition)position yMargin:(float)yMargin OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end

/// Sets the location of the Channel Button.
typedef SWIFT_ENUM(NSInteger, BubblePosition, open) {
  BubblePositionTop = 0,
  BubblePositionBottom = 1,
};




/// Sets the appearance of the Channel button icon.
typedef SWIFT_ENUM(NSInteger, ChannelButtonIcon, open) {
  ChannelButtonIconChannel = 0,
  ChannelButtonIconChatBubbleFilled = 1,
  ChannelButtonIconChatProgressFilled = 2,
  ChannelButtonIconChatQuestionFilled = 3,
  ChannelButtonIconChatLightningFilled = 4,
  ChannelButtonIconChatBubbleAltFilled = 5,
  ChannelButtonIconSmsFilled = 6,
  ChannelButtonIconCommentFilled = 7,
  ChannelButtonIconSendForwardFilled = 8,
  ChannelButtonIconHelpFilled = 9,
  ChannelButtonIconChatProgress = 10,
  ChannelButtonIconChatQuestion = 11,
  ChannelButtonIconChatBubbleAlt = 12,
  ChannelButtonIconSms = 13,
  ChannelButtonIconComment = 14,
  ChannelButtonIconSendForward = 15,
  ChannelButtonIconCommunication = 16,
  ChannelButtonIconHeadset = 17,
};

enum ChannelButtonPosition : NSInteger;

/// Sets the appearance and location of the Channel Button.
/// The icon’s appearance can be set using the ChannelButtonIcon, and the position can be set to the bottom left or right.
/// Default value for position is .right and the default value for margin is 20pt each.
SWIFT_CLASS("_TtC14ChannelIOFront19ChannelButtonOption")
@interface ChannelButtonOption : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) enum ChannelButtonIcon icon;
@property (nonatomic) enum ChannelButtonPosition position;
@property (nonatomic) float xMargin;
@property (nonatomic) float yMargin;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIcon:(enum ChannelButtonIcon)icon position:(enum ChannelButtonPosition)position xMargin:(float)xMargin yMargin:(float)yMargin OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end

typedef SWIFT_ENUM(NSInteger, ChannelButtonPosition, open) {
  ChannelButtonPositionRight = 0,
  ChannelButtonPositionLeft = 1,
};

@protocol ChannelPluginDelegate;
@class UIApplication;
@class UIWindowScene;
@class UIWindow;
@class User;
@class NSData;

SWIFT_CLASS("_TtC14ChannelIOFront9ChannelIO")
@interface ChannelIO : NSObject
/// This is a notifier delegate for ChannelIO events
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, weak) id <ChannelPluginDelegate> _Nullable delegate;)
+ (id <ChannelPluginDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <ChannelPluginDelegate> _Nullable)value;
/// Check if ChannelIO is in booted state.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isBooted;)
+ (BOOL)isBooted SWIFT_WARN_UNUSED_RESULT;
/// Initializes ChannelIO. You must call this method once before using any of the other methods of ChannelIO.
/// \param application Application instance
///
+ (void)initialize:(UIApplication * _Nonnull)application;
/// Initialize ChannelIO
/// \code
/// // SceneDelegate.swift
/// var channelWindow: UIWindow?
///
/// func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
///   guard let windowScene = (scene as? UIWindowScene) else { return }
///
///   channelWindow = ChannelIO.initializeWindow(with: windowScene)
/// }
///
/// \endcode\param scene Scene instance
///
+ (UIWindow * _Nullable)initializeWindowWith:(UIWindowScene * _Nonnull)scene SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=13.0);
/// Starts ChannelIO. You may call this method anywhere you want, but be sure that features offered by Channel will only work after it is called.
/// For more details, see document about lifecycle.
/// attention:
/// boot is asynchronous. Booting is a non-blocking operation which allows next line of a code to run immediately.
/// That means, booting may not have finished when the boot method is returned.
/// If your code depends on the boot result, use callback parameter.
/// \code
/// let bootConfig = BootConfig(pluginKey: YOUR_PLUGIN_KEY)
///
/// ChannelIO.boot(with: bootConfig) { (completion, user) in
///     if completion == .success, let user = user {
///         // success
///     } else {
///         // show failed reason from bootStatus
///     }
/// }
///
/// \endcode\param config BootConfig object to configure plugin key, user profiles and more.
///
/// \param completion (optional)Callback that is invoked when the boot request is processed. If you need to do some work depending on the boot result, this callback is the place for you to work with.
/// <ul>
///   <li>
///     bootStatus: Boot result
///   </li>
///   <li>
///     user: User data when boot successful. You can recognize boot is success or why failed.
///   </li>
/// </ul>
///
+ (void)bootWith:(BootConfig * _Nonnull)config completion:(void (^ _Nullable)(enum BootStatus, User * _Nullable))completion;
/// Notifies Channel SDK of the FCM push token changes.
/// This method has to be called within
/// <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code>
/// in <code>AppDelegate</code> in order to get receive push notification from Channel io
/// \param deviceToken A data that represents device token
///
+ (void)initPushTokenWithDeviceToken:(NSData * _Nonnull)deviceToken SWIFT_METHOD_FAMILY(none);
/// Init a push token.
/// This method has to be called within
/// <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code>
/// in <code>AppDelegate</code> in order to get receive push notification from Channel io
/// \param tokenString A string that represents token
///
+ (void)initPushTokenWithTokenString:(NSString * _Nonnull)tokenString SWIFT_METHOD_FAMILY(none);
/// Set debug mode. Debug logs are shown.
/// \param flag Flag for debug
///
+ (void)setDebugModeWith:(BOOL)debug;
/// Stop interaction with ChannelIO
/// After calling shutdown, All of actions are not possible until boot is called.
/// Call this method when user terminate session or logout.
+ (void)shutdown;
/// Set ChannelIO only can receive push notification and track
+ (void)sleep;
/// Show channel button globally. It depend on boot state.
/// \code
/// ChannelIO.showChannelButton()
///
/// // not shown
/// ChannelIO.boot(with: bootConfig) { (completion, user) in
///   if completion == .success, let user = user {
///     // shown
///     // You can call it here instead of above.
///   } else {
///     // not shown
///   }
/// }
///
/// \endcode
+ (void)showChannelButton;
/// Hide channel button globally. It depend on boot state.
+ (void)hideChannelButton;
/// Open ChannelIO Messenger UI. It same with clicking default channel button. It depend on boot state.
+ (void)showMessenger;
/// Close ChannelIO Messenger UI when it is opened.
/// It same with clicking close button in ChannelIO Messenger UI.
+ (void)hideMessenger;
/// Hides the Channel Popup on the global screen.
+ (void)hidePopup;
/// Open chat directly. See more case below.
/// \param chatId Chat id to open directly. If chat id is invalid, open lounge. If chat id is null, open chat with parameter message. See message parameter.
///
/// \param message Preset text message when open empty user chat. <em>This parameter is valid when the chat id is null.</em>
///
+ (void)openChatWith:(NSString * _Nullable)chatId message:(NSString * _Nullable)message;
/// Opens a user chat and starts the specified workflow.
/// \param workflowId The ID of workflow to start with. An error page will be shown if such workflow does not exist.
///
+ (void)openWorkflowWith:(NSString * _Nullable)workflowId;
/// Update user profile (objective-c)
/// \param profile A dictionary with profile key and profile value pair. Set a value to nil to remove existing value
///
+ (void)updateUser:(NSDictionary<NSString *, id> * _Nonnull)profile completion:(void (^ _Nullable)(BOOL, User * _Nullable))completion;
/// Update user param
/// \code
/// var profile: [String:Any] = [:]
///
/// // name
/// profile["name"] = USER_NAME
///   
/// // mobileNumber
/// profile["mobileNumber"] = "+~~~"
///   
/// // email
/// profile["email"] = EMAIL
///   
/// // avatar url
/// profile["avatarUrl"] = AVATAR_URL
///   
/// // other
/// profile[OTHER_KEY] = OTHER_VALUE
///   
/// let userData = UpdateUserParamBuilder()
///   .with(language: .english)
///   .with(profile: profile)
///   .build()
///     
/// ChannelIO.updateUser(param: userData) { (error, user) in
///   if let user = user, error == nil {
///     // success, result data is user
///   } else if let error = error {
///     // error, see error
///   }
/// }
///
/// \endcode\param profile A dictionary with profile key and profile value pair. Set a value to nil to remove existing value
///
+ (void)updateUserWithParam:(NSDictionary<NSString *, id> * _Nonnull)param completion:(void (^ _Nullable)(NSError * _Nullable, User * _Nullable))completion;
/// Add tags to user.
/// Maximum tags size is 10. A tag already added is ignored.
/// Tags are Case-insensitive (migrate to lower case)
/// null, list includes null, empty list, empty item is not allowed
/// \code
/// var testTags: [String] = []
/// testTags.append("tag1")
/// testTags.append("tag2")
/// testTags.append("tag3")
/// testTags.append("tag4")
///
/// ChannelIO.addTags(testTags) { (error, user) in
///   if let user = user {
///     // success
///   } else if error = error {
///     // check reason
///   }
/// }
///
/// \endcode\param tags Tags to add
///
/// \param completion Callback that informs you of the result of the API and updated user data.
///
+ (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSError * _Nullable, User * _Nullable))completion;
/// Removes tag from the user. Removing non-existing tags is no-op. Each tags are case insensitive, which means it treats “A” and “a” as identical values.
/// The argument passed to the method should conform to some preconditions:
/// <ul>
///   <li>
///     argument should be non-null
///   </li>
///   <li>
///     list should not include null element
///   </li>
///   <li>
///     list should have at least 1 item
///   </li>
///   <li>
///     all items should have at least 1 character
///   </li>
/// </ul>
/// \code
/// var testTags: [String] = []
/// testTags.append("tag1")
/// testTags.append("tag2")
/// testTags.append("tag3")
/// testTags.append("tag4")
///
/// ChannelIO.removeTags(testTags) { (error, user) in
///   if let user = user {
///     // success
///   } else if error = error {
///     // check reason
///   }
/// }
///
/// \endcode\param completion Callback that informs you of the result of the API and updated user data.
///
+ (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSError * _Nullable, User * _Nullable))completion;
/// Track an event
/// \param eventName Event name. max length is 30
///
/// \param eventProperty A dictionary contains information about event
///
+ (void)trackWithEventName:(NSString * _Nonnull)eventName eventProperty:(NSDictionary<NSString *, id> * _Nullable)eventProperty;
/// Checks if the push payload is targeting on Channel SDK.
/// \param userInfo A dictionary contains push information
///
+ (BOOL)isChannelPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Notifies an event that the user has received the push notification.
/// \code
/// @UIApplicationMain
/// class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {
///   @available(iOS 10.0, *)
///   func userNotificationCenter(_ center: UNUserNotificationCenter,
///                               didReceive response: UNNotificationResponse,
///                               withCompletionHandler completionHandler: @escaping () -> Void) {
///     let userInfo = response.notification.request.content.userInfo
///     
///     if ChannelIO.isChannelPushNotification(userInfo) {
///       // This line
///       ChannelIO.receivePushNotification(userInfo)
///       ChannelIO.storePushNotification(userInfo)
///     }
///     completionHandler()
///   }
///
///   func application(_ application: UIApplication,
///                    didReceiveRemoteNotification userInfo: [AnyHashable : Any],
///                    fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
///     if ChannelIO.isChannelPushNotification(userInfo) {
///       // This line
///       ChannelIO.receivePushNotification(userInfo)
///       ChannelIO.storePushNotification(userInfo)
///     }
///     completionHandler()
///   }
/// }
///
/// \endcode
+ (void)receivePushNotification:(NSDictionary * _Nonnull)userInfo completion:(void (^ _Nullable)(void))completion;
/// Save push data to device
/// \code
/// @UIApplicationMain
/// class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {
///   @available(iOS 10.0, *)
///   func userNotificationCenter(_ center: UNUserNotificationCenter,
///                               didReceive response: UNNotificationResponse,
///                               withCompletionHandler completionHandler: @escaping () -> Void) {
///     let userInfo = response.notification.request.content.userInfo
///     
///     if ChannelIO.isChannelPushNotification(userInfo) {
///       ChannelIO.receivePushNotification(userInfo)
///       // This line
///       ChannelIO.storePushNotification(userInfo)
///     }
///     completionHandler()
///   }
///
/// \endcode
+ (void)storePushNotification:(NSDictionary * _Nonnull)userInfo;
/// Checks if the plugin has unhandled push notification. See push notifications for details.
/// \code
/// class ViewController : UIViewController {
///   override func viewDidLoad() {
///     super.viewDidLoad()
///     
///     // This line
///     if (ChannelIO.hasStoredPushNotification()) {
///       ChannelIO.openStoredPushNotification()
///     }
///   }
/// }
///
/// \endcode
+ (BOOL)hasStoredPushNotification SWIFT_WARN_UNUSED_RESULT;
/// Open chat corresponding to the push notification data stored by storePushNotification call. See push notification for details.
/// \code
/// class ViewController : UIViewController {
///   override func viewDidLoad() {
///     super.viewDidLoad()
///     
///     if ChannelIO.hasStoredPushNotification() {
///       // This line
///       ChannelIO.openStoredPushNotification()
///     }
///   }
/// }
///
/// \endcode
+ (void)openStoredPushNotification;
/// Sets the name of the screen along with user chat profile. If <code>track</code> is called before <code>setPage</code>, the event will not reflect the page information.
/// important:
/// Passing null as argument to setPage is not the same with calling resetPage. A setPage(null) call will literally set page name as null.
/// \param page This is the screen name when track is called. When calling <code>.track(nil)</code>, the event’s page is set to <code>null</code>.
///
/// \param profile The user chat profile value. When nil is assigned to a specific field within the profile object, only the value of that field is cleared.
///
+ (void)setPage:(NSString * _Nullable)page profile:(NSDictionary<NSString *, id> * _Nonnull)profile;
/// Resets the name of the screen and user chat profile value set by <code>setPage</code>. The default page name is the name of the ViewController class that calls <code>track</code>.
+ (void)resetPage;
+ (void)applyAppearance:(enum Appearance)appearance SWIFT_DEPRECATED_MSG("", "setAppearance:");
+ (void)setAppearance:(enum Appearance)appearance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ChannelIO (SWIFT_EXTENSION(ChannelIOFront))
@end

@class NSURL;

SWIFT_CLASS("_TtCC14ChannelIOFront9ChannelIO18CrossPlatformUtils")
@interface CrossPlatformUtils : NSObject
+ (void)openBrowserWithUrl:(NSURL * _Nullable)url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class PopupData;

/// This is a notifier for ChannelIO events.
/// This document tell you about delegate’s functions.
SWIFT_PROTOCOL("_TtP14ChannelIOFront21ChannelPluginDelegate_")
@protocol ChannelPluginDelegate
@optional
/// Called when messenger screen is appreared.
/// Generally called when user click channel button, call ChannelIO.showMessenger, ChannelIO.openChat
- (void)onShowMessenger;
/// Called when messenger screen is hidden.
/// Generally called when user click close button, call ChannelIO.hideMessenger, ChannelIO.sleep, ChannelIO.shutdown etc…
- (void)onHideMessenger;
/// Called when messenger screen is hidden.
/// Generally called when user click close button, call ChannelIO.hideMessenger, ChannelIO.sleep, ChannelIO.shutdown etc…
- (void)onChatCreatedWithChatId:(NSString * _Nonnull)chatId;
/// Called when badge count is changed.
/// Use initial badge count by BootCallback > User.alert
- (void)onBadgeChangedWithCount:(NSInteger)count SWIFT_DEPRECATED_MSG("", "onBadgeChangedWithUnread:alert:");
/// Invoked when the number of notifications changes or at <code>boot</code>.
/// <ul>
///   <li>
///     unread : The number of all unread notifications the user has. It includes the number of <code>alert</code>. It is displayed as a red dot on the Channel button.
///   </li>
///   <li>
///     alert : The number of important notifications that the user has not read. It is displayed as a number on the Channel button.
///   </li>
/// </ul>
- (void)onBadgeChangedWithUnread:(NSInteger)unread alert:(NSInteger)alert;
/// Called when followup contact changed by user interaction (follow up form, change in settings)
/// This method is not called by ChannelIO.updateUser
- (void)onFollowUpChangedWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
/// Called when user click url in chat, link buttons.
/// return true to block redirect by ChannelIO
- (BOOL)onUrlClickedWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Called when popup data is received.
/// Generally called when manager talked, marketing message incomming.
- (void)onPopupDataReceivedWithEvent:(PopupData * _Nonnull)event;
@end

typedef SWIFT_ENUM(NSInteger, ChannelStage, open) {
  ChannelStageDevelopment = 0,
  ChannelStageProduction = 1,
  ChannelStageFeature = 2,
};





/// Language for initializing users for BootConfig. If user is already created, this option is ignored.
typedef SWIFT_ENUM(NSInteger, LanguageOption, open) {
  LanguageOptionEnglish = 0,
  LanguageOptionKorean = 1,
  LanguageOptionJapanese = 2,
  LanguageOptionDevice = 3,
};

























/// Data in OnPopupDataReceived. You can render custom in-app popup by this model.
SWIFT_CLASS("_TtC14ChannelIOFront9PopupData")
@interface PopupData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull chatId;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull avatarUrl;
- (NSDictionary<NSString *, id> * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Profile data for boot
SWIFT_CLASS("_TtC14ChannelIOFront7Profile")
@interface Profile : NSObject <NSCoding>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nullable)name avatarUrl:(NSString * _Nullable)avatarUrl mobileNumber:(NSString * _Nullable)mobileNumber email:(NSString * _Nullable)email OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (Profile * _Nonnull)setWithName:(NSString * _Nonnull)name;
- (Profile * _Nonnull)setWithAvatarUrl:(NSString * _Nonnull)avatarUrl;
- (Profile * _Nonnull)setWithMobileNumber:(NSString * _Nonnull)mobileNumber;
- (Profile * _Nonnull)setWithEmail:(NSString * _Nonnull)email;
- (Profile * _Nonnull)setWithPropertyKey:(NSString * _Nonnull)propertyKey value:(id _Nullable)value;
@end


































@interface UIPageControl (SWIFT_EXTENSION(ChannelIOFront))
- (void)sizeToFit;
@end











































SWIFT_CLASS("_TtC14ChannelIOFront26UpdateUserParamObjcBuilder")
@interface UpdateUserParamObjcBuilder : NSObject
- (UpdateUserParamObjcBuilder * _Nonnull)withProfileKey:(NSString * _Nonnull)profileKey value:(id _Nullable)value;
- (UpdateUserParamObjcBuilder * _Nonnull)setProfileNil;
- (UpdateUserParamObjcBuilder * _Nonnull)withProfileOnceKey:(NSString * _Nonnull)profileOnceKey value:(id _Nullable)value;
- (UpdateUserParamObjcBuilder * _Nonnull)setProfileOnceNil;
- (UpdateUserParamObjcBuilder * _Nonnull)withTags:(NSArray<NSString *> * _Nullable)tags;
- (UpdateUserParamObjcBuilder * _Nonnull)withLanguage:(enum LanguageOption)language;
- (UpdateUserParamObjcBuilder * _Nonnull)withUnsubscribeEmail:(BOOL)unsubscribeEmail;
- (UpdateUserParamObjcBuilder * _Nonnull)withUnsubscribeTexting:(BOOL)unsubscribeTexting;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Data builder for use updateUser
SWIFT_CLASS("_TtC14ChannelIOFront4User")
@interface User : NSObject
/// An identifier that Channel uses.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// An identifier to distinguish member users. An anonymous user’s is null.
@property (nonatomic, readonly, copy) NSString * _Nonnull memberId;
/// User’s name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// User’s profile Image url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Profile dictionary to overwrite. Set null to reset. Set null for profile value to reset profile value. Empty map is not allowed.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable profile;
/// The number of all unread notifications the user has. It includes the number of alert. It is displayed as a red dot on the Channel button. .
@property (nonatomic, readonly) NSInteger unread;
/// The number of important notifications that the user has not read. It is displayed as a number on the Channel button.
@property (nonatomic, readonly) NSInteger alert;
/// Tags for user. Data will be overwritten. Max size is 10. Case-insensitive (migrate to lower case)
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
/// An initial language that user will use. It only takes effect when the user is being created. If user is already created, this option is ignored.
@property (nonatomic, readonly, copy) NSString * _Nullable language;
/// Unsubscribe from the user’s marketing messages via SMS or LMS.
@property (nonatomic, readonly) BOOL unsubscribeTexting;
/// Unsubscribe from the user’s marketing message sent by email.
@property (nonatomic, readonly) BOOL unsubscribeEmail;
- (NSDictionary<NSString *, id> * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef CHANNELIOFRONT_SWIFT_H
#define CHANNELIOFRONT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChannelIOFront",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// An enum object for the appearance of the SDK.
typedef SWIFT_ENUM(NSInteger, Appearance, open) {
  AppearanceSystem = 0,
  AppearanceLight = 1,
  AppearanceDark = 2,
};

@class NSString;
@class Profile;
@class ChannelButtonOption;
@class BubbleOption;
enum LanguageOption : NSInteger;
enum ChannelStage : NSInteger;
@class NSCoder;

/// Model used for boot.
SWIFT_CLASS("_TtC14ChannelIOFront10BootConfig")
@interface BootConfig : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Key generated by ChannelIO
@property (nonatomic, copy) NSString * _Nonnull pluginKey;
/// User’s unique id. Logged in customers should always have this value filled in.
@property (nonatomic, copy) NSString * _Nullable memberId;
/// A hash value that verifies the provided secret key and member id.
@property (nonatomic, copy) NSString * _Nullable memberHash;
/// Users’ profile values
@property (nonatomic, strong) Profile * _Nullable profile;
/// Change default channel button’s position, margins.
@property (nonatomic, strong) ChannelButtonOption * _Nullable channelButtonOption;
/// Change default bubble popup’s position, margins.
@property (nonatomic, strong) BubbleOption * _Nullable bubbleOption;
/// Hide in app popup like marketing messages.
/// If you want to implemets custom popup, use onPopupDataReceived delegate.
@property (nonatomic) BOOL hidePopup;
/// Flag for send default events like PageView.
@property (nonatomic) BOOL trackDefaultEvent;
/// Language for initializing users. If user is already created, this option is ignored.
@property (nonatomic) enum LanguageOption language;
@property (nonatomic) enum ChannelStage stage;
/// Model used for boot.
/// Data structure that contains plugin key, user id, profiles, unsubscribed information, etc…
/// attention:
/// Do not recommend to use a predictable value for memberId Because memberId is a unique valuethat we use to identify users, we do not recommend to use predictable values such as numerical combination, emailaddress, user name and etc. It may cause privacy and security issues. We recommend to use higher than 256 bitshash value.
/// \code
/// let profile = Profile()
///   .set(name: USER_NAME)
///   .set(propertyKey: KEY, value: VALUE)
///
/// let channelButtonOption = ChannelButtonOption.init(
///   position: .left,
///   xMargin: 16,
///   yMargin: 24
/// )
///
/// let bootConfig = BootConfig()
///   .set(pluginKey: PLUGIN_KEY)
///   .set(memberId: MEMBER_ID)
///   .set(profile: profile)
///   ...
///
/// ChannelIO.boot(with: bootConfig)
///
/// \endcode\param pluginKey Key generated by ChannelIO
///
/// \param memberId User’s unique id. Logged in customers should always have this value filled in
///
/// \param memberHash A hash value that verifies the provided secret key and member id
///
/// \param profile Users’ profile values
///
/// \param channelButtonOption Option that change default channel button position, margins
///
/// \param bubbleOption Option that change default bubble popup’s position, margins
///
/// \param hidePopup Flag for hide in app popup like marketing messages.
///
/// \param trackDefaultEvent Flag for send default events like PageView
///
/// \param language Language option that initializes users. If user is already created, this option is ignored.
///
/// \param unsubscribeEmail Flag for receive marketing message by email.
///
/// \param unsubscribeTexting Flag for receive marketing message sms of lms.
///
/// \param appearance Plugin’s initial appearance settings
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Key generated by ChannelIO
- (BootConfig * _Nonnull)setWithPluginKey:(NSString * _Nonnull)pluginKey;
/// User’s unique id. Logged in customers should always have this value filled in
- (BootConfig * _Nonnull)setWithMemberId:(NSString * _Nullable)memberId;
/// A hash value that verifies the provided secret key and member id
- (BootConfig * _Nonnull)setWithMemberHash:(NSString * _Nullable)memberHash;
/// Users’ profile values
- (BootConfig * _Nonnull)setWithProfile:(Profile * _Nullable)profile;
/// Change default channel button’s position, margins
- (BootConfig * _Nonnull)setWithChannelButtonOption:(ChannelButtonOption * _Nullable)channelButtonOption;
/// Change default bubble popup’s position, margins
- (BootConfig * _Nonnull)setWithBubbleOption:(BubbleOption * _Nonnull)bubbleOption;
/// Hide in app popup like marketing messages.
/// If you want to implemets custom popup, use `onPopupDataReceived delegate
- (BootConfig * _Nonnull)setWithHidePopup:(BOOL)hidePopup;
/// Flag for send default events like PageView
- (BootConfig * _Nonnull)setWithTrackDefaultEvent:(BOOL)trackDefaultEvent;
/// Language for initializing users
/// If user is already created, this option is ignored
- (BootConfig * _Nonnull)setWithLanguage:(enum LanguageOption)language;
/// Flag for receive marketing message by email
/// If user’s unsubscribeEmail value is already set to true, you can’t update by boot
- (BootConfig * _Nonnull)setWithUnsubscribeEmail:(BOOL)unsubscribeEmail;
/// Flag for receive marketing message sms of lms
/// If user’s unsubscribeTexting value is already set to true, you can’t update by boot
- (BootConfig * _Nonnull)setWithUnsubscribeTexting:(BOOL)unsubscribeTexting;
- (BootConfig * _Nonnull)setWithAppearance:(enum Appearance)appearance;
@end

typedef SWIFT_ENUM(NSInteger, BootStatus, open) {
  BootStatusSuccess = 0,
  BootStatusNotInitialized = 1,
  BootStatusNetworkTimeout = 2,
  BootStatusNotAvailableVersion = 3,
  BootStatusServiceUnderConstruction = 4,
  BootStatusRequirePayment = 5,
  BootStatusAccessDenied = 6,
  BootStatusUnknown = 7,
};

enum BubblePosition : NSInteger;
@class NSNumber;

/// Option for default bubble popup’s position. You can set bubble popup position top or bottom bottom by <code>BubblePosition</code>
SWIFT_CLASS("_TtC14ChannelIOFront12BubbleOption")
@interface BubbleOption : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) enum BubblePosition position;
@property (nonatomic, strong) NSNumber * _Nullable yMargin;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPosition:(enum BubblePosition)position OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithYMargin:(float)yMargin OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPosition:(enum BubblePosition)position yMargin:(float)yMargin OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end

/// Sets the location of the Channel Button.
typedef SWIFT_ENUM(NSInteger, BubblePosition, open) {
  BubblePositionTop = 0,
  BubblePositionBottom = 1,
};




/// Sets the appearance of the Channel button icon.
typedef SWIFT_ENUM(NSInteger, ChannelButtonIcon, open) {
  ChannelButtonIconChannel = 0,
  ChannelButtonIconChatBubbleFilled = 1,
  ChannelButtonIconChatProgressFilled = 2,
  ChannelButtonIconChatQuestionFilled = 3,
  ChannelButtonIconChatLightningFilled = 4,
  ChannelButtonIconChatBubbleAltFilled = 5,
  ChannelButtonIconSmsFilled = 6,
  ChannelButtonIconCommentFilled = 7,
  ChannelButtonIconSendForwardFilled = 8,
  ChannelButtonIconHelpFilled = 9,
  ChannelButtonIconChatProgress = 10,
  ChannelButtonIconChatQuestion = 11,
  ChannelButtonIconChatBubbleAlt = 12,
  ChannelButtonIconSms = 13,
  ChannelButtonIconComment = 14,
  ChannelButtonIconSendForward = 15,
  ChannelButtonIconCommunication = 16,
  ChannelButtonIconHeadset = 17,
};

enum ChannelButtonPosition : NSInteger;

/// Sets the appearance and location of the Channel Button.
/// The icon’s appearance can be set using the ChannelButtonIcon, and the position can be set to the bottom left or right.
/// Default value for position is .right and the default value for margin is 20pt each.
SWIFT_CLASS("_TtC14ChannelIOFront19ChannelButtonOption")
@interface ChannelButtonOption : NSObject <NSSecureCoding>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) enum ChannelButtonIcon icon;
@property (nonatomic) enum ChannelButtonPosition position;
@property (nonatomic) float xMargin;
@property (nonatomic) float yMargin;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIcon:(enum ChannelButtonIcon)icon position:(enum ChannelButtonPosition)position xMargin:(float)xMargin yMargin:(float)yMargin OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end

typedef SWIFT_ENUM(NSInteger, ChannelButtonPosition, open) {
  ChannelButtonPositionRight = 0,
  ChannelButtonPositionLeft = 1,
};

@protocol ChannelPluginDelegate;
@class UIApplication;
@class UIWindowScene;
@class UIWindow;
@class User;
@class NSData;

SWIFT_CLASS("_TtC14ChannelIOFront9ChannelIO")
@interface ChannelIO : NSObject
/// This is a notifier delegate for ChannelIO events
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, weak) id <ChannelPluginDelegate> _Nullable delegate;)
+ (id <ChannelPluginDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <ChannelPluginDelegate> _Nullable)value;
/// Check if ChannelIO is in booted state.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isBooted;)
+ (BOOL)isBooted SWIFT_WARN_UNUSED_RESULT;
/// Initializes ChannelIO. You must call this method once before using any of the other methods of ChannelIO.
/// \param application Application instance
///
+ (void)initialize:(UIApplication * _Nonnull)application;
/// Initialize ChannelIO
/// \code
/// // SceneDelegate.swift
/// var channelWindow: UIWindow?
///
/// func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
///   guard let windowScene = (scene as? UIWindowScene) else { return }
///
///   channelWindow = ChannelIO.initializeWindow(with: windowScene)
/// }
///
/// \endcode\param scene Scene instance
///
+ (UIWindow * _Nullable)initializeWindowWith:(UIWindowScene * _Nonnull)scene SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=13.0);
/// Starts ChannelIO. You may call this method anywhere you want, but be sure that features offered by Channel will only work after it is called.
/// For more details, see document about lifecycle.
/// attention:
/// boot is asynchronous. Booting is a non-blocking operation which allows next line of a code to run immediately.
/// That means, booting may not have finished when the boot method is returned.
/// If your code depends on the boot result, use callback parameter.
/// \code
/// let bootConfig = BootConfig(pluginKey: YOUR_PLUGIN_KEY)
///
/// ChannelIO.boot(with: bootConfig) { (completion, user) in
///     if completion == .success, let user = user {
///         // success
///     } else {
///         // show failed reason from bootStatus
///     }
/// }
///
/// \endcode\param config BootConfig object to configure plugin key, user profiles and more.
///
/// \param completion (optional)Callback that is invoked when the boot request is processed. If you need to do some work depending on the boot result, this callback is the place for you to work with.
/// <ul>
///   <li>
///     bootStatus: Boot result
///   </li>
///   <li>
///     user: User data when boot successful. You can recognize boot is success or why failed.
///   </li>
/// </ul>
///
+ (void)bootWith:(BootConfig * _Nonnull)config completion:(void (^ _Nullable)(enum BootStatus, User * _Nullable))completion;
/// Notifies Channel SDK of the FCM push token changes.
/// This method has to be called within
/// <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code>
/// in <code>AppDelegate</code> in order to get receive push notification from Channel io
/// \param deviceToken A data that represents device token
///
+ (void)initPushTokenWithDeviceToken:(NSData * _Nonnull)deviceToken SWIFT_METHOD_FAMILY(none);
/// Init a push token.
/// This method has to be called within
/// <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code>
/// in <code>AppDelegate</code> in order to get receive push notification from Channel io
/// \param tokenString A string that represents token
///
+ (void)initPushTokenWithTokenString:(NSString * _Nonnull)tokenString SWIFT_METHOD_FAMILY(none);
/// Set debug mode. Debug logs are shown.
/// \param flag Flag for debug
///
+ (void)setDebugModeWith:(BOOL)debug;
/// Stop interaction with ChannelIO
/// After calling shutdown, All of actions are not possible until boot is called.
/// Call this method when user terminate session or logout.
+ (void)shutdown;
/// Set ChannelIO only can receive push notification and track
+ (void)sleep;
/// Show channel button globally. It depend on boot state.
/// \code
/// ChannelIO.showChannelButton()
///
/// // not shown
/// ChannelIO.boot(with: bootConfig) { (completion, user) in
///   if completion == .success, let user = user {
///     // shown
///     // You can call it here instead of above.
///   } else {
///     // not shown
///   }
/// }
///
/// \endcode
+ (void)showChannelButton;
/// Hide channel button globally. It depend on boot state.
+ (void)hideChannelButton;
/// Open ChannelIO Messenger UI. It same with clicking default channel button. It depend on boot state.
+ (void)showMessenger;
/// Close ChannelIO Messenger UI when it is opened.
/// It same with clicking close button in ChannelIO Messenger UI.
+ (void)hideMessenger;
/// Hides the Channel Popup on the global screen.
+ (void)hidePopup;
/// Open chat directly. See more case below.
/// \param chatId Chat id to open directly. If chat id is invalid, open lounge. If chat id is null, open chat with parameter message. See message parameter.
///
/// \param message Preset text message when open empty user chat. <em>This parameter is valid when the chat id is null.</em>
///
+ (void)openChatWith:(NSString * _Nullable)chatId message:(NSString * _Nullable)message;
/// Opens a user chat and starts the specified workflow.
/// \param workflowId The ID of workflow to start with. An error page will be shown if such workflow does not exist.
///
+ (void)openWorkflowWith:(NSString * _Nullable)workflowId;
/// Update user profile (objective-c)
/// \param profile A dictionary with profile key and profile value pair. Set a value to nil to remove existing value
///
+ (void)updateUser:(NSDictionary<NSString *, id> * _Nonnull)profile completion:(void (^ _Nullable)(BOOL, User * _Nullable))completion;
/// Update user param
/// \code
/// var profile: [String:Any] = [:]
///
/// // name
/// profile["name"] = USER_NAME
///   
/// // mobileNumber
/// profile["mobileNumber"] = "+~~~"
///   
/// // email
/// profile["email"] = EMAIL
///   
/// // avatar url
/// profile["avatarUrl"] = AVATAR_URL
///   
/// // other
/// profile[OTHER_KEY] = OTHER_VALUE
///   
/// let userData = UpdateUserParamBuilder()
///   .with(language: .english)
///   .with(profile: profile)
///   .build()
///     
/// ChannelIO.updateUser(param: userData) { (error, user) in
///   if let user = user, error == nil {
///     // success, result data is user
///   } else if let error = error {
///     // error, see error
///   }
/// }
///
/// \endcode\param profile A dictionary with profile key and profile value pair. Set a value to nil to remove existing value
///
+ (void)updateUserWithParam:(NSDictionary<NSString *, id> * _Nonnull)param completion:(void (^ _Nullable)(NSError * _Nullable, User * _Nullable))completion;
/// Add tags to user.
/// Maximum tags size is 10. A tag already added is ignored.
/// Tags are Case-insensitive (migrate to lower case)
/// null, list includes null, empty list, empty item is not allowed
/// \code
/// var testTags: [String] = []
/// testTags.append("tag1")
/// testTags.append("tag2")
/// testTags.append("tag3")
/// testTags.append("tag4")
///
/// ChannelIO.addTags(testTags) { (error, user) in
///   if let user = user {
///     // success
///   } else if error = error {
///     // check reason
///   }
/// }
///
/// \endcode\param tags Tags to add
///
/// \param completion Callback that informs you of the result of the API and updated user data.
///
+ (void)addTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSError * _Nullable, User * _Nullable))completion;
/// Removes tag from the user. Removing non-existing tags is no-op. Each tags are case insensitive, which means it treats “A” and “a” as identical values.
/// The argument passed to the method should conform to some preconditions:
/// <ul>
///   <li>
///     argument should be non-null
///   </li>
///   <li>
///     list should not include null element
///   </li>
///   <li>
///     list should have at least 1 item
///   </li>
///   <li>
///     all items should have at least 1 character
///   </li>
/// </ul>
/// \code
/// var testTags: [String] = []
/// testTags.append("tag1")
/// testTags.append("tag2")
/// testTags.append("tag3")
/// testTags.append("tag4")
///
/// ChannelIO.removeTags(testTags) { (error, user) in
///   if let user = user {
///     // success
///   } else if error = error {
///     // check reason
///   }
/// }
///
/// \endcode\param completion Callback that informs you of the result of the API and updated user data.
///
+ (void)removeTags:(NSArray<NSString *> * _Nonnull)tags completion:(void (^ _Nullable)(NSError * _Nullable, User * _Nullable))completion;
/// Track an event
/// \param eventName Event name. max length is 30
///
/// \param eventProperty A dictionary contains information about event
///
+ (void)trackWithEventName:(NSString * _Nonnull)eventName eventProperty:(NSDictionary<NSString *, id> * _Nullable)eventProperty;
/// Checks if the push payload is targeting on Channel SDK.
/// \param userInfo A dictionary contains push information
///
+ (BOOL)isChannelPushNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Notifies an event that the user has received the push notification.
/// \code
/// @UIApplicationMain
/// class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {
///   @available(iOS 10.0, *)
///   func userNotificationCenter(_ center: UNUserNotificationCenter,
///                               didReceive response: UNNotificationResponse,
///                               withCompletionHandler completionHandler: @escaping () -> Void) {
///     let userInfo = response.notification.request.content.userInfo
///     
///     if ChannelIO.isChannelPushNotification(userInfo) {
///       // This line
///       ChannelIO.receivePushNotification(userInfo)
///       ChannelIO.storePushNotification(userInfo)
///     }
///     completionHandler()
///   }
///
///   func application(_ application: UIApplication,
///                    didReceiveRemoteNotification userInfo: [AnyHashable : Any],
///                    fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
///     if ChannelIO.isChannelPushNotification(userInfo) {
///       // This line
///       ChannelIO.receivePushNotification(userInfo)
///       ChannelIO.storePushNotification(userInfo)
///     }
///     completionHandler()
///   }
/// }
///
/// \endcode
+ (void)receivePushNotification:(NSDictionary * _Nonnull)userInfo completion:(void (^ _Nullable)(void))completion;
/// Save push data to device
/// \code
/// @UIApplicationMain
/// class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {
///   @available(iOS 10.0, *)
///   func userNotificationCenter(_ center: UNUserNotificationCenter,
///                               didReceive response: UNNotificationResponse,
///                               withCompletionHandler completionHandler: @escaping () -> Void) {
///     let userInfo = response.notification.request.content.userInfo
///     
///     if ChannelIO.isChannelPushNotification(userInfo) {
///       ChannelIO.receivePushNotification(userInfo)
///       // This line
///       ChannelIO.storePushNotification(userInfo)
///     }
///     completionHandler()
///   }
///
/// \endcode
+ (void)storePushNotification:(NSDictionary * _Nonnull)userInfo;
/// Checks if the plugin has unhandled push notification. See push notifications for details.
/// \code
/// class ViewController : UIViewController {
///   override func viewDidLoad() {
///     super.viewDidLoad()
///     
///     // This line
///     if (ChannelIO.hasStoredPushNotification()) {
///       ChannelIO.openStoredPushNotification()
///     }
///   }
/// }
///
/// \endcode
+ (BOOL)hasStoredPushNotification SWIFT_WARN_UNUSED_RESULT;
/// Open chat corresponding to the push notification data stored by storePushNotification call. See push notification for details.
/// \code
/// class ViewController : UIViewController {
///   override func viewDidLoad() {
///     super.viewDidLoad()
///     
///     if ChannelIO.hasStoredPushNotification() {
///       // This line
///       ChannelIO.openStoredPushNotification()
///     }
///   }
/// }
///
/// \endcode
+ (void)openStoredPushNotification;
/// Sets the name of the screen along with user chat profile. If <code>track</code> is called before <code>setPage</code>, the event will not reflect the page information.
/// important:
/// Passing null as argument to setPage is not the same with calling resetPage. A setPage(null) call will literally set page name as null.
/// \param page This is the screen name when track is called. When calling <code>.track(nil)</code>, the event’s page is set to <code>null</code>.
///
/// \param profile The user chat profile value. When nil is assigned to a specific field within the profile object, only the value of that field is cleared.
///
+ (void)setPage:(NSString * _Nullable)page profile:(NSDictionary<NSString *, id> * _Nonnull)profile;
/// Resets the name of the screen and user chat profile value set by <code>setPage</code>. The default page name is the name of the ViewController class that calls <code>track</code>.
+ (void)resetPage;
+ (void)applyAppearance:(enum Appearance)appearance SWIFT_DEPRECATED_MSG("", "setAppearance:");
+ (void)setAppearance:(enum Appearance)appearance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ChannelIO (SWIFT_EXTENSION(ChannelIOFront))
@end

@class NSURL;

SWIFT_CLASS("_TtCC14ChannelIOFront9ChannelIO18CrossPlatformUtils")
@interface CrossPlatformUtils : NSObject
+ (void)openBrowserWithUrl:(NSURL * _Nullable)url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class PopupData;

/// This is a notifier for ChannelIO events.
/// This document tell you about delegate’s functions.
SWIFT_PROTOCOL("_TtP14ChannelIOFront21ChannelPluginDelegate_")
@protocol ChannelPluginDelegate
@optional
/// Called when messenger screen is appreared.
/// Generally called when user click channel button, call ChannelIO.showMessenger, ChannelIO.openChat
- (void)onShowMessenger;
/// Called when messenger screen is hidden.
/// Generally called when user click close button, call ChannelIO.hideMessenger, ChannelIO.sleep, ChannelIO.shutdown etc…
- (void)onHideMessenger;
/// Called when messenger screen is hidden.
/// Generally called when user click close button, call ChannelIO.hideMessenger, ChannelIO.sleep, ChannelIO.shutdown etc…
- (void)onChatCreatedWithChatId:(NSString * _Nonnull)chatId;
/// Called when badge count is changed.
/// Use initial badge count by BootCallback > User.alert
- (void)onBadgeChangedWithCount:(NSInteger)count SWIFT_DEPRECATED_MSG("", "onBadgeChangedWithUnread:alert:");
/// Invoked when the number of notifications changes or at <code>boot</code>.
/// <ul>
///   <li>
///     unread : The number of all unread notifications the user has. It includes the number of <code>alert</code>. It is displayed as a red dot on the Channel button.
///   </li>
///   <li>
///     alert : The number of important notifications that the user has not read. It is displayed as a number on the Channel button.
///   </li>
/// </ul>
- (void)onBadgeChangedWithUnread:(NSInteger)unread alert:(NSInteger)alert;
/// Called when followup contact changed by user interaction (follow up form, change in settings)
/// This method is not called by ChannelIO.updateUser
- (void)onFollowUpChangedWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
/// Called when user click url in chat, link buttons.
/// return true to block redirect by ChannelIO
- (BOOL)onUrlClickedWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Called when popup data is received.
/// Generally called when manager talked, marketing message incomming.
- (void)onPopupDataReceivedWithEvent:(PopupData * _Nonnull)event;
@end

typedef SWIFT_ENUM(NSInteger, ChannelStage, open) {
  ChannelStageDevelopment = 0,
  ChannelStageProduction = 1,
  ChannelStageFeature = 2,
};





/// Language for initializing users for BootConfig. If user is already created, this option is ignored.
typedef SWIFT_ENUM(NSInteger, LanguageOption, open) {
  LanguageOptionEnglish = 0,
  LanguageOptionKorean = 1,
  LanguageOptionJapanese = 2,
  LanguageOptionDevice = 3,
};

























/// Data in OnPopupDataReceived. You can render custom in-app popup by this model.
SWIFT_CLASS("_TtC14ChannelIOFront9PopupData")
@interface PopupData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull chatId;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull avatarUrl;
- (NSDictionary<NSString *, id> * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Profile data for boot
SWIFT_CLASS("_TtC14ChannelIOFront7Profile")
@interface Profile : NSObject <NSCoding>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(NSString * _Nullable)name avatarUrl:(NSString * _Nullable)avatarUrl mobileNumber:(NSString * _Nullable)mobileNumber email:(NSString * _Nullable)email OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (Profile * _Nonnull)setWithName:(NSString * _Nonnull)name;
- (Profile * _Nonnull)setWithAvatarUrl:(NSString * _Nonnull)avatarUrl;
- (Profile * _Nonnull)setWithMobileNumber:(NSString * _Nonnull)mobileNumber;
- (Profile * _Nonnull)setWithEmail:(NSString * _Nonnull)email;
- (Profile * _Nonnull)setWithPropertyKey:(NSString * _Nonnull)propertyKey value:(id _Nullable)value;
@end


































@interface UIPageControl (SWIFT_EXTENSION(ChannelIOFront))
- (void)sizeToFit;
@end











































SWIFT_CLASS("_TtC14ChannelIOFront26UpdateUserParamObjcBuilder")
@interface UpdateUserParamObjcBuilder : NSObject
- (UpdateUserParamObjcBuilder * _Nonnull)withProfileKey:(NSString * _Nonnull)profileKey value:(id _Nullable)value;
- (UpdateUserParamObjcBuilder * _Nonnull)setProfileNil;
- (UpdateUserParamObjcBuilder * _Nonnull)withProfileOnceKey:(NSString * _Nonnull)profileOnceKey value:(id _Nullable)value;
- (UpdateUserParamObjcBuilder * _Nonnull)setProfileOnceNil;
- (UpdateUserParamObjcBuilder * _Nonnull)withTags:(NSArray<NSString *> * _Nullable)tags;
- (UpdateUserParamObjcBuilder * _Nonnull)withLanguage:(enum LanguageOption)language;
- (UpdateUserParamObjcBuilder * _Nonnull)withUnsubscribeEmail:(BOOL)unsubscribeEmail;
- (UpdateUserParamObjcBuilder * _Nonnull)withUnsubscribeTexting:(BOOL)unsubscribeTexting;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Data builder for use updateUser
SWIFT_CLASS("_TtC14ChannelIOFront4User")
@interface User : NSObject
/// An identifier that Channel uses.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// An identifier to distinguish member users. An anonymous user’s is null.
@property (nonatomic, readonly, copy) NSString * _Nonnull memberId;
/// User’s name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// User’s profile Image url.
@property (nonatomic, readonly, copy) NSString * _Nullable avatarUrl;
/// Profile dictionary to overwrite. Set null to reset. Set null for profile value to reset profile value. Empty map is not allowed.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable profile;
/// The number of all unread notifications the user has. It includes the number of alert. It is displayed as a red dot on the Channel button. .
@property (nonatomic, readonly) NSInteger unread;
/// The number of important notifications that the user has not read. It is displayed as a number on the Channel button.
@property (nonatomic, readonly) NSInteger alert;
/// Tags for user. Data will be overwritten. Max size is 10. Case-insensitive (migrate to lower case)
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
/// An initial language that user will use. It only takes effect when the user is being created. If user is already created, this option is ignored.
@property (nonatomic, readonly, copy) NSString * _Nullable language;
/// Unsubscribe from the user’s marketing messages via SMS or LMS.
@property (nonatomic, readonly) BOOL unsubscribeTexting;
/// Unsubscribe from the user’s marketing message sent by email.
@property (nonatomic, readonly) BOOL unsubscribeEmail;
- (NSDictionary<NSString *, id> * _Nonnull)toJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
